// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { Page } from "page.slint";
import { Theme } from "../theme.slint";
import { GroupBox, Value , ValueDisplay, BarChart, Tile } from "../widgets/widgets.slint";

export struct TimeModel {
    hours: int,
    minutes: int,
    seconds: int,
}
export struct DateModel {
    day: int,
    month: int,
    year: int,
    weekday: string, //Mo = 0, Di = 1, ...
}

export global TimeAdapter {
    in property <string> title: "Zeit";
    in property <TimeModel> time: {
        hours: 9,
        minutes: 16,
        seconds: 2,
    };
    in property <DateModel> date: {
        day: 23,
        month: 6,
        year: 2024,
        weekday: "So",
    };
}

component TimeDelegate {
    in property <bool> active;
    in property <string> title <=> i-title.text;
    in property <string> value;
    in property <bool> alternative-colors;

    HorizontalLayout {
        spacing: 15px;

        Rectangle {
            min_width: 1px;
            background: alternative-colors ? Theme.palette.slint-blue-300 : Theme.palette.lemon-green;
            horizontal-stretch: 0;
        }

        VerticalLayout {
            alignment: center;
            horizontal-stretch: 1;

            i-title := Text {
                color: alternative-colors ? Theme.palette.slint-blue-300 : Theme.palette.lemon-green;
                font-size: Theme.typo.label.size;
                font-weight: Theme.typo.label.weight;
            }

            HorizontalLayout {
                alignment: start;
                spacing: 5px;

                Text {
                    color: Theme.palette.white;
                    text: value;
                    font-size: Theme.typo.value.size;
                    font-weight: Theme.typo.value.weight;
                    vertical-alignment: center;
                }
            }
        }
    }
}

struct TimeDateModel {
    title: string,
    value: string,
}

export component Time inherits Page {
    in property <string> title <=> TimeAdapter.title;
    in property <TimeModel> time <=> TimeAdapter.time;
    in property <DateModel> date <=> TimeAdapter.date;

    private property <[TimeDateModel]> tdm:  [
                            {title: "Datum", value:"\{root.date.weekday}, \{root.date.day}.\{root.date.month}.\{root.date.year}"},
                            {title: "Uhrzeit", value: (root.time.minutes < 10) ?
                            ((root.time.seconds < 10) ? "\{root.time.hours}:0\{root.time.minutes}:0\{root.time.seconds}":"\{root.time.hours}:0\{root.time.minutes}:\{root.time.seconds}")
                            : ((root.time.seconds < 10) ? "\{root.time.hours}:\{root.time.minutes}:0\{root.time.seconds}":"\{root.time.hours}:\{root.time.minutes}:\{root.time.seconds}")}
                            ];
    /*
    i-container := Rectangle {
        visible: true;
        width: 100%;
        height: 100%;
        border-radius: 4px;
        background: Theme.palette.lemon-green-gradient;
    } */
    HorizontalLayout {
        width: parent.width - 30px;
        height: 100%;
        padding-top: 12px;
        padding-bottom: 12px;

        for value in tdm : TimeDelegate {
            width: parent.width / tdm.length;
            horizontal-stretch: 1;
            alternative-colors: true;
            title: value.title;
            value: value.value;
            active: root.active;
        }
    }
    /*
    GroupBox {
        title: root.title;
        spacing: 3px;
        in property <bool> transparent-background: false;


        Tile {
            text: "Datum";
            sub-text: "\{root.date.weekday}, \{root.date.day}.\{root.date.month}.\{root.date.year}";
        }
        Tile {
            text: "Uhrzeit";
            alternateBackground: true;
            
            sub-text: (root.time.minutes < 10) ? ((root.time.seconds < 10) ? "\{root.time.hours}:0\{root.time.minutes}:0\{root.time.seconds}":"\{root.time.hours}:0\{root.time.minutes}:\{root.time.seconds}")
            : ((root.time.seconds < 10) ? "\{root.time.hours}:\{root.time.minutes}:0\{root.time.seconds}":"\{root.time.hours}:\{root.time.minutes}:\{root.time.seconds}");
        }

        Rectangle {}
    }
    */
}